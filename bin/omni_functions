#!/bin/bash
# shellcheck source=/dev/null

OMNIHOME=${HOME}/OmniStream
source ~/.config/omnistream.conf
source "${OMNIHOME}"/bin/omni_complete

# Main OMNI function for OmniPlex

omni() {
	COMMAND=${1,,}
	CURDIR=$(pwd)
	case "${COMMAND}" in
	up | start)
		test -x ${OMNIHOME}/plugins/up-start && ${OMNIHOME}/plugins/up-start
		cd "${OMNIHOME}" || exit
		git pull
		echo -n Rebuilding config file...
		./bin/make-env rebuild
		echo
		"${OMNIHOME}"/bin/check-dns
		/usr/local/bin/docker-compose up -d --remove-orphans "${@:2}"
		docker exec -ti sabnzbd /config/extras.sh >/dev/null 2>&1
		cd "${CURDIR}" || exit
		test -x ${OMNIHOME}/plugins/up-end && ${OMNIHOME}/plugins/up-end
		;;
	down | stop)
		test -x ${OMNIHOME}/plugins/down-start && ${OMNIHOME}/plugins/down-start
		cd "${OMNIHOME}" || exit
		/usr/local/bin/docker-compose down "${@:2}"
		echo
		"${OMNIHOME}"/bin/del-dns
		cd "${CURDIR}" || exit
		test -x ${OMNIHOME}/plugins/down-end && ${OMNIHOME}/plugins/down-end
		;;
	version | v)
		echo "OmniStream installed version from $(git -C $OMNIHOME log --pretty="format:%cr" -n1)"
		;;
	refresh | repair)
		cd "${OMNIHOME}" || exit
		git fetch
		git reset --hard HEAD
		git merge '@{u}'
		cd "${CURDIR}" || exit
		;;
	status)
		cd "${OMNIHOME}" || exit
		/usr/local/bin/docker-compose ps "${@:2}"
		cd "${CURDIR}" || exit
		;;
	stats)
		docker stats "${@:2}"
		;;
	restart)
		cd "${OMNIHOME}" || exit
		/usr/local/bin/docker-compose restart "${@:2}"
		cd "${CURDIR}" || exit
		;;
	services)
		"${OMNIHOME}"/services
		;;
	setup)
		"${OMNIHOME}"/bin/make-env "${@:2}"
		;;
	apps)
		cd "${OMNIHOME}"/enabled || exit
		ls
		;;
	bin)
		cd "${OMNIHOME}"/bin || exit
		ls
		;;
	configs)
		cd "${OMNIHOME}"/Configs || exit
		ls
		;;
	home)
		cd "${OMNIHOME}" || exit
		ls
		;;
	dns)
		"${OMNIHOME}/bin/dns-report-gen"
		cat "${OMNIHOME}/dns-report"
		;;
	logs)
		cd "${OMNIHOME}" || exit
		/usr/local/bin/docker-compose logs -f "${@:2}"
		cd "${CURDIR}" || exit
		;;
	mounts)
		cd "${OMNIHOME}"/mnt || exit
		ls
		;;
	rebuild)
		cd "${OMNIHOME}" || exit
		"${OMNIHOME}"/bin/make-env rebuild
		echo
		"${OMNIHOME}"/bin/check-dns
		/usr/local/bin/docker-compose up --remove-orphans --build -d
		docker exec -ti ${SABNZBDNAME} /config/extras.sh >/dev/null 2>&1
		docker system prune -a -f --volumes
		cd "${CURDIR}" || exit
		;;
	update)
		cd "${OMNIHOME}" || exit
		git pull
		"${OMNIHOME}"/bin/make-env rebuild
		"${OMNIHOME}"/bin/dns-report-gen
		echo
		/usr/local/bin/docker-compose pull
		/usr/local/bin/docker-compose up --remove-orphans --build -d
		docker exec -ti sabnzbd /config/extras.sh >/dev/null 2>&1
		docker system prune -a -f --volumes
		cd "${CURDIR}" || exit
		;;
	clean)
		omni down
		docker system prune -a -f --volumes
		;;
	pull)
		cd "${OMNIHOME}" || exit
		/usr/local/bin/docker-compose up --no-start
		docker exec -ti sabnzbd /config/extras.sh >/dev/null 2>&1
		cd "${CURDIR}" || exit
		;;
	*)
		echo ${YELLOW}"OmniStream commands:"
		echo ${GREEN}"	omni up "${YELLOW}"- bring online all enabled OmniStream components"
		echo ${GREEN}"	omni down "${YELLOW}"- shutdown all running OmniStream components"
		echo ${GREEN}"	omni restart "${YELLOW}"- stops and restarts all or specific OmniStream compoments"
		echo ${BLUE}"		Ex:  omni restart - restarts everything"
		echo ${BLUE}"		Ex:  omni restart emby - just restarts emby"
		echo ${GREEN}"	omni logs "${YELLOW}"- shows you logs for all or specific services, scrolling in realtime.  Press control-c to exit"
		echo ${BLUE}"		Ex:  omni logs - shows logs for all services running"
		echo ${BLUE}"		Ex:  omni logs plex emby - shows logs for just the plex and emby services"
		echo ${GREEN}"	omni status "${YELLOW}"- show current state of running OmniStream components"
		echo ${BLUE}"		Ex:  omni status - shows all running compoments"
		echo ${BLUE}"		Ex:  omni status plex tautulli - shows status of plex and tautulli only"
		echo ${GREEN}"	omni stats "${YELLOW}"- shows stats like CPU and memory usage by component.  Press control-c to exit"
		echo ${BLUE}"		Ex:  omni stats - shows ongoing stats for all OmniStream components"
		echo ${BLUE}"		Ex:  omni stats sonarr radarr - shows ongoing stats for just Sonarr and Radarr"
		echo ${GREEN}"	omni setup "${YELLOW}"- builds (replaces) your OmniStream configuration.  Allows changing parameters"
		echo ${GREEN}"	omni apps "${YELLOW}"- switches you to the components (enabled) local directory"
		echo ${GREEN}"	omni configs "${YELLOW}"- switches you to the configs directory"
		echo ${GREEN}"	omni home "${YELLOW}"- switches you to the OmniStream core files directory"
		echo ${STD}
		;;
	esac
}

preload() {
	SOURCE=${1}
	source ~/.config/omnistream.conf
	if [[ -z ${SOURCE} ]]; then
		cd "${RCLONEMOUNT}"/Media || exit
	else
		SOURCEDIR=$(pwd)
		SOURCE=${SOURCEDIR}/${SOURCE}
		RELATIVEDIR=$(echo "${SOURCEDIR}" | sed 's|'"${RCLONEMOUNT}"'||')
		TARGET=${UNSYNCED}/${RELATIVEDIR}
		mkdir -p "${UNSYNCED}/${RELATIVEDIR}"
		cp -Rv "${SOURCE}" "${TARGET}"
	fi
}

function o+ {
	CURDIR=$(pwd)
	cd "${OMNIHOME}"/enabled || exit
	for i in "$@"; do
		PARAM=${1}
		if [[ -z ${PARAM} ]]; then
			echo Currently enabled components:
			ls
			echo
			echo Available components:
			ls ../components/*.yaml
		elif [[ -f ${OMNIHOME}/components/${PARAM} ]]; then
			ln -sf ../components/"${PARAM}" "${PARAM}"
			echo "${PARAM}": Enabled
		else
			echo Error: "${PARAM}" not found
			echo
			echo Please choose from the following components:
			ls "${OMNIHOME}"/components/*.yaml
		fi
		shift
	done
	cd "${CURDIR}" || exit
	source "${OMNIHOME}"/bin/omni_complete
}

function o-() {
	CURDIR=$(pwd)
	cd "${OMNIHOME}"/enabled || exit
	for i in "$@"; do
		PARAM=${1}
		if [[ -z ${PARAM} ]]; then
			echo Currently enabled components:
			ls *.yaml
		elif [[ -f ${OMNIHOME}/enabled/${PARAM} ]]; then
			rm "${PARAM}"
			echo "${PARAM}": Disabled
		else
			echo Error: "${PARAM}" not found
			echo
			echo Please choose from the following components:
			ls "${OMNIHOME}"/enabled/*.yaml
		fi
		shift
	done
	cd "${CURDIR}" || exit
	source "${OMNIHOME}"/bin/omni_complete
}

O=${OMNIHOME}
M=${MERGEMOUNT}/Media
G=${MERGEMOUNT}
D=${MERGEMOUNT}/Downloads
